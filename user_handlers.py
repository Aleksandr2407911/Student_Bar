from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup, Message,
                           KeyboardButton, ReplyKeyboardMarkup, CallbackQuery)
import xlsx_parse
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import push_pull_to_DB
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import datetime

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()



class register_commands(StatesGroup):
    category_name = State()


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
button_1 = KeyboardButton(text='–ú–µ–Ω—é üç≤')
button_2 = KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
button_3 = KeyboardButton(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã üïê')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
Keyboard = ReplyKeyboardMarkup(
    keyboard=[[button_1], [button_2], [button_3]], resize_keyboard=True)


button_add = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='add_to_the_bin')
button_go_products = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_p')

keyboard_add_products = InlineKeyboardMarkup(inline_keyboard=[[button_add, button_go_products]])


def modify_string_to_correct_size(string):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ —Ä–∞–∑–º–µ—Ä,
    –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 64 –±–∞–π—Ç, —Ç–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –µ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç,
    –µ—Å–ª–∏ –º–µ–Ω—å—à–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    """
    if len(string.encode("utf-8")) > 64:
        string = string[:27] + '...'
    return string


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞—Ö (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î)
def compose_dc_for_categories():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–∞–≤–∞—Ä—å, –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î —Ç–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–∏–ø–∞ {–∫–ª—é—á(callback): –∑–Ω–∞—á–µ–Ω–∏–µ(text)}
    –¶–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: —É–¥–æ–±—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö callback, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
    –í–ø–µ—Ä–µ–¥–∏ –∫–ª—é—á–∞ —Å—Ç–∞–≤–ª—é c_ —Å–æ–∫—Ä–∞—â–µ–Ω–æ categories_, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–æ –ø—Ä–∏ –ª–æ–≤–ª–µ –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    """
    list_for_dc = push_pull_to_DB.fetch_data_from_table('categories')
    dc_for_categories = {}
    count = 0

    for i in list_for_dc:
        count += 1
        dc_for_categories[modify_string_to_correct_size(
            f"c_{count}")] = modify_string_to_correct_size(i['category'])

    return dc_for_categories


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–¥ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞—Ö (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î)
def compose_dc_products_in_exact_category(category_name):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–∞–≤–∞—Ä—å, –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î —Ç–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–∏–ø–∞ {–∫–ª—é—á(callback): –∑–Ω–∞—á–µ–Ω–∏–µ(text)}
    –¶–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: —É–¥–æ–±—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö callback, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
    –í–ø–µ—Ä–µ–¥–∏ –∫–ª—é—á–∞ —Å—Ç–∞–≤–ª—é p_ —Å–æ–∫—Ä–∞—â–µ–Ω–æ products_, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–æ –ø—Ä–∏ –ª–æ–≤–ª–µ –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    """
    list_for_dc = push_pull_to_DB.fetch_productlist_based_on_category(
        category_name)
    dc_for_products = {}

    for k, v in compose_dc_for_categories().items():
        if v == category_name:
            name_of_certain_category = k

    for i in list_for_dc:
        info_about_certain_product = (
            modify_string_to_correct_size(i['name']), i['price'], i['weight'], i['picture'])
        key = "p " + f"{name_of_certain_category} " + i['name']
        dc_for_products[modify_string_to_correct_size(
            key)] = info_about_certain_product

    return dc_for_products


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def build_inline_keyboard_for_categories(buttons):
    """
    –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã keyboard_list
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å –º–µ—Ç–æ–¥–æ–º items()
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—Å—Ç –∏ callback
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—Ä—É.
    .adjust(2) - —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç 2 –≤ —Ä—è–¥
    .as_markup() - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ, –∏–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç
    """
    keyboard_list = InlineKeyboardBuilder()
    for callback, text in buttons.items():
        keyboard_list.add(InlineKeyboardButton(
            text=text, callback_data=callback))
    return keyboard_list.adjust(2).as_markup()


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç—ã
async def build_inline_keyboard_for_products(buttons):
    """
    –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã keyboard_list
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å –º–µ—Ç–æ–¥–æ–º items()
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—Å—Ç –∏ callback
    –ü–æ—Å–ª–µ for –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—Ä—É.
    .adjust(2) - —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç 2 –≤ —Ä—è–¥
    .as_markup() - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ, –∏–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç
    """
    keyboard_list = InlineKeyboardBuilder()
    for callback, text in buttons.items():
        keyboard_list.add(InlineKeyboardButton(
            text=text[0], callback_data=callback))
    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_c")
    keyboard_list.row(back_button)
    return keyboard_list.adjust(1).as_markup()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '/start'
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text='Hi', reply_markup=Keyboard)


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é üç≤
@router.message(F.text == '–ú–µ–Ω—é üç≤')
async def process_menu_command(message: Message):
    await message.answer(text='–ú–µ–Ω—é üç≤', reply_markup=await build_inline_keyboard_for_categories(compose_dc_for_categories()))


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ category –∏ –≤—ã–≤–æ–¥–∏—Ç, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(lambda callback: callback.data.startswith('c_'))
async def get_back_from_category(callback: CallbackQuery):
    temp = compose_dc_for_categories()
    callback_data = temp[callback.data]
    await callback.answer()  # –£–±–∏—Ä–∞–µ—Ç –º–∏–≥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text=callback_data, reply_markup=await build_inline_keyboard_for_products(compose_dc_products_in_exact_category(callback_data)))


# —Ö—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
@router.callback_query(F.data == "back_c")
async def return_to_category(callback: CallbackQuery):
    await callback.answer()  # –£–±–∏—Ä–∞–µ—Ç –º–∏–≥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text='–ú–µ–Ω—é üç≤', reply_markup=await build_inline_keyboard_for_categories(compose_dc_for_categories()))


# —Ö—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ product, –≤—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
@router.callback_query(lambda callback: callback.data.startswith('p '))
async def get_back_data_aboutproduct(callback: CallbackQuery, state: FSMContext):
    """
    –°–ª–µ–¥—É—é—â–∏–µ 4 —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ó–∞—á–µ–º?
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—ã —Ç–µ—Ä—è–µ–º –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤–≥–ª—É–±—å –ø–æ —É—Ä–æ–≤–Ω—é, –≤ –ø—Ä–æ–¥—É–∫—Ç—ã
    –ß—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–º –Ω–∞–¥–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ª–æ–≤–∞—Ä—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (compose_dc_products_in_exact_category)
    –≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –≤–Ω—É—Ç—Ä–∏ –æ—Ç—Ç–∞–∫–∏–≤–∞–µ—Ç—Å—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ –µ—Å—Ç—å –º—ã –Ω–µ —Å–º–æ–∂–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏, –Ω–µ –∑–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    –î–ª—è —ç—Ç–æ–≥–æ —è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–ª —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ï–≥–æ –≤–∏–¥ {c_1: '–°–∞–ª–∞—Ç—ã'}
    –î–∞–ª–µ–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ callback-–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —è –∑–∞—Å–æ–≤—ã–≤–∞—é –∫–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤—ã—à–µ. –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ {p c_1 –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: '–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞'}
    –õ–æ–≤–ª—é callback, –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é –∏–∑ –Ω–µ–≥–æ c_1 –∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞, –Ω–∞—Ö–æ–∂—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–∞–ª–µ–µ —É–∂–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—é —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (compose_dc_products_in_exact_category)
    """
    distinguish_category_index = callback.data.split()[1]
    dc_for_categ = compose_dc_for_categories()[distinguish_category_index]
    product = compose_dc_products_in_exact_category(dc_for_categ)
    product_info = product[callback.data]
    string = f"–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {product_info[0]}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {product_info[1]}—Ä—É–±.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\\–í–µ—Å: {product_info[2]}"

    await state.update_data(category=dc_for_categ, data_product={'name': product_info[0],
                                                                 'cost': product_info[1]})
    await callback.answer()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–∫–æ–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    await callback.message.answer_photo(photo=product_info[3], caption=string, reply_markup=keyboard_add_products)


# —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
@router.callback_query(F.data == "back_p")
async def return_to_products(callback: CallbackQuery):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–∫–æ–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    await callback.answer()
    await callback.message.delete()





# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {id1: [{}, {}], id2: [‚Ä¶]}
#{544595768: [{'name': '–°–∞–ª–∞—Ç ¬´–¶–µ–∑–∞—Ä—å¬ª —Å –∫—É—Ä–∏—Ü–µ–π', 'cost': 182}, {'name': '–°–∞–ª–∞—Ç ¬´–ú–µ—Ç–µ–ª–∫–∞¬ª', 'cost': 65}]}
temp_bin = {}

@router.callback_query(F.data == "add_to_the_bin")
async def add_to_the_bin(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data_product = data.get('data_product')
    await callback.answer('–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    temp_bin.setdefault(callback.from_user.id, []).append(data_product)
    print(temp_bin)


# USER BIN
button_change_prod = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã üç≤', callback_data='change_products')
button_to_order = InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ üß∫', callback_data='to_order')

keyboard_bin = InlineKeyboardMarkup(inline_keyboard=[[button_change_prod], [button_to_order]])


@router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
async def return_to_bin(message: Message):
    await message.answer(text='–ö–æ—Ä–∑–∏–Ω–∞ üß∫', reply_markup= keyboard_bin)


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
async def build_inline_keyboard_for_bin(temp_bin, id):
    """
    –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã keyboard_list
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å –º–µ—Ç–æ–¥–æ–º items()
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—Å—Ç –∏ callback
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—Ä—É.
    .adjust(2) - —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç 2 –≤ —Ä—è–¥
    .as_markup() - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ, –∏–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç
    """
    keyboard_list = InlineKeyboardBuilder()
    for product in temp_bin[id]:
        keyboard_list.add(InlineKeyboardButton(text=f"{product['name']}/{product['cost']}", callback_data=f"_bin{product['name']}"))
    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_bin_menu")
    keyboard_list.row(back_button)
    return keyboard_list.adjust(2).as_markup()



# –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
# –í–æ–∑–≤—Ç—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
async def amount_bin(temp_bin, id):
    amount = 0
    for product in temp_bin[id]:
        amount += product['cost']
    return amount


@router.callback_query(F.data == "change_products")
async def change_prosucts(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in temp_bin:
        temp_amount = amount_bin(temp_bin, callback.from_user.id)
        await callback.answer()  # –£–±–∏—Ä–∞–µ—Ç –º–∏–≥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await callback.message.edit_text(text=f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {await temp_amount}',
                                        reply_markup=await build_inline_keyboard_for_bin(temp_bin, callback.from_user.id))
    else:
        await callback.answer(text='–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', show_alert=True)



@router.callback_query(F.data == "back_to_bin_menu")
async def return_to_bin_menu(callback: CallbackQuery, state: FSMContext):
    #data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    #category = data.get('category')
    await callback.answer()
    await callback.message.edit_text(text='–ö–æ—Ä–∑–∏–Ω–∞ üß∫', reply_markup= keyboard_bin)




# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ go_back –∫–æ—Ä–∑–∏–Ω—ã
button_delete_prod = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', callback_data='delete_products')
button_go_back_to_products_bin = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='go_back_to_products_bin')

keyboard_delete_product = InlineKeyboardMarkup(inline_keyboard=[[button_delete_prod], [button_go_back_to_products_bin]])


@router.callback_query(lambda callback: callback.data.startswith('_bin'))
async def delete_product_from_bin_menu(callback: CallbackQuery, state: FSMContext):
    await state.update_data(data_product= callback.data)
    await callback.answer()
    await callback.message.edit_text(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', reply_markup= keyboard_delete_product)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'
# –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def delete_product(name, user_id):
    count = -1
    for product in temp_bin[user_id]:
        count += 1
        if name == f"_bin{product.get('name', 'no')}":
            temp_bin[user_id].pop(count)
            print(f"–ø—Ä–æ–¥—É–∫—Ç {product['name']} —É–¥–∞–ª–µ–Ω")
            break
    print("–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å")



@router.callback_query(F.data == "delete_products")
async def delete_product_from_bin(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    name = data.get('data_product')
    await delete_product(name, callback.from_user.id)
    print(temp_bin) #{544595768: [{'name': '–®–∞—É—Ä–º–∞ —Å –∫—É—Ä–∏—Ü–µ–π', 'cost': 196}]}
    print(name) #_bin–®–∞—É—Ä–º–∞ —Å –∫—É—Ä–∏—Ü–µ–π
    temp_amount = amount_bin(temp_bin, callback.from_user.id) # –Ω–µ –Ω—É–∂–Ω–æ await
    await callback.answer(text="–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await callback.message.edit_text(text=f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {await temp_amount}',
                                     reply_markup=await build_inline_keyboard_for_bin(temp_bin, callback.from_user.id))




@router.callback_query(F.data == "go_back_to_products_bin")
async def return_to_bin_menu(callback: CallbackQuery, state: FSMContext):
    #data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    #category = data.get('category')
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    temp_amount = amount_bin(temp_bin, callback.from_user.id) # –Ω–µ –Ω—É–∂–Ω–æ await
    await callback.answer('–ù–∞–∑–∞–¥')
    await callback.message.edit_text(text=f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {await temp_amount}',
                                     reply_markup=await build_inline_keyboard_for_bin(temp_bin, callback.from_user.id))
    

@router.callback_query(F.data == 'to_order')
async def send_products_to_order(callback: CallbackQuery, state: FSMContext):
    now_datetime = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    push_pull_to_DB.insert_order_to_table(temp_bin, callback.from_user.id, now_datetime)
    del temp_bin[callback.from_user.id]