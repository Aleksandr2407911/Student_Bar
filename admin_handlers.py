from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup, Message,
                           KeyboardButton, ReplyKeyboardMarkup, CallbackQuery)
from filters import is_admin_filter
from aiogram import F
import push_pull_to_DB
import xlsx_parse
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()

# –°—Ç–∞–≤–∏–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router.message.filter(is_admin_filter)


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
button_1 = KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—é üç≤')
button_2 = KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ üïê')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboard_main = ReplyKeyboardMarkup(
    keyboard=[[button_1], [button_2]], resize_keyboard=True)


'''#–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
list_buttons = []
for i in range():
    button = [KeyboardButton(text='–ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê')] # –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –±–∞–∑—ã –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –≤–ø–∏—Å–∞—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    list_buttons.append(button)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
keyboard_orders = ReplyKeyboardMarkup(keyboard=list_buttons)'''


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '/start'
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text='Hi!', reply_markup=keyboard_main)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—é üç≤>
# –û–±–Ω–æ–≤–ª—è–µ—Ç –ë–î (—Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π) –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—é üç≤')
async def deny_accept_order(message: Message):
    actual_day_menu_F = xlsx_parse.find_daily_menu()
    push_pull_to_DB.for_update_menu_button(
        'product', 'categories', actual_day_menu_F)
    await message.answer('–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–æ')

def modify_string_to_correct_size(string):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ —Ä–∞–∑–º–µ—Ä,
    –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 64 –±–∞–π—Ç, —Ç–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –µ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç,
    –µ—Å–ª–∏ –º–µ–Ω—å—à–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    """
    string = str(string)
    if len(string.encode("utf-8")) > 64:
        string = string[:27] + '...'
    return string

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞—Ö (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î)
def compose_dc_for_orders(status, callback_start):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î —Ç–∞–±–ª–∏—Ü—ã orders, —Ç–∏–ø–∞ {–∫–ª—é—á(callback): –∑–Ω–∞—á–µ–Ω–∏–µ(text)}
    –¶–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: —É–¥–æ–±—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö callback, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
    –í–ø–µ—Ä–µ–¥–∏ –∫–ª—é—á–∞ —Å—Ç–∞–≤–ª—é o_ —Å–æ–∫—Ä–∞—â–µ–Ω–æ order_, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–æ –ø—Ä–∏ –ª–æ–≤–ª–µ –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    """
    list_for_dc = push_pull_to_DB.fetch_orders_from_table(status)
    dc_for_orders = {}
    count = 0
    print(list_for_dc)

    for i in list_for_dc:
        count += 1
        dc_for_orders[modify_string_to_correct_size(
            f"{callback_start}{count}")] = modify_string_to_correct_size(i['id'])
    print(dc_for_orders)
    return dc_for_orders


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ orders
async def build_inline_keyboard_for_orders(buttons):
    """
    –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã keyboard_list
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å –º–µ—Ç–æ–¥–æ–º items()
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—Å—Ç –∏ callback
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—Ä—É.
    .adjust(2) - —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç 2 –≤ —Ä—è–¥
    .as_markup() - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ, –∏–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç
    """
    keyboard_list = InlineKeyboardBuilder()
    for callback, text in buttons.items():
        keyboard_list.add(InlineKeyboardButton(
            text=text, callback_data=callback))
    keyboard_list.add(InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥', callback_data='back_to_main'))
    print('–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞')
    return keyboard_list.adjust(1).as_markup()



'''# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ üïê>
@router.message(F.text == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ üïê')
async def deny_accept_order(message: Message):
    print('—Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª')
    await message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ üïê',
                         reply_markup=await build_inline_keyboard_for_orders(compose_dc_for_orders()))'''



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤
button_for_confirm = InlineKeyboardButton(text='–¢—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', callback_data='for_confirm')
button_in_work = InlineKeyboardButton(text='–í —Ä–∞–±–æ—Ç–µ', callback_data='in_work')
button_completed = InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', callback_data='completed')

keyboard_orders = InlineKeyboardMarkup(inline_keyboard=[[button_for_confirm], [button_in_work], [button_completed]])


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ üïê>
@router.message(F.text == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ üïê')
async def types_of_orders(message: Message):
    print('—Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª')
    await message.answer(text='–ó–∞–∫–∞–∑—ã üïê',
                         reply_markup=keyboard_orders)

@router.callback_query(F.data == "for_confirm")
async def orders_for_confirm(callback: CallbackQuery, state: FSMContext):
    #data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    #category = data.get('category')
    await callback.answer()
    await callback.message.edit_text(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ üïê',
                                     reply_markup= await build_inline_keyboard_for_orders(compose_dc_for_orders('_for_conf', 0)))



@router.callback_query(F.data == "in_work")
async def orders_in_work(callback: CallbackQuery, state: FSMContext):
    #data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    #category = data.get('category')
    await callback.answer()
    await callback.message.edit_text(text='–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ',
                                     reply_markup= await build_inline_keyboard_for_orders(compose_dc_for_orders('_in_w', 3)))


@router.callback_query(F.data == "completed")
async def orders_completed(callback: CallbackQuery, state: FSMContext):
    #data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    #category = data.get('category')
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–ø–æ–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
                                     reply_markup= await build_inline_keyboard_for_orders(compose_dc_for_orders('_comp', 1)))



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
button_confirm_order = InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='confirm')
button_deny_order = InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='deny')

keyboard_cd_order = InlineKeyboardMarkup(inline_keyboard=[[button_confirm_order], [button_deny_order]])

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞
# –ò –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Å—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
@router.callback_query(lambda callback: callback.data.startswith('_for_conf'))
async def reply_to_order(callback: CallbackQuery, state: FSMContext):
    await state.update_data(data_product=callback.data)
    await callback.answer()
    await callback.message.edit_text(text='–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–∫–∞–∑', reply_markup=keyboard_cd_order)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç–µ
button_3_minetes = InlineKeyboardButton(text='–ö—É—Ä—å–µ—Ä –±—É–¥—É—Ç —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç', callback_data='3_minetes')
button_delays = InlineKeyboardButton(text='–ö—É—Ä—å–µ—Ä –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', callback_data='delays')
button_order_completed = InlineKeyboardButton(text='–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data='order_completed')

keyboard_in_work = InlineKeyboardMarkup(inline_keyboard=[[button_3_minetes], [button_delays], [button_order_completed]])


@router.callback_query(lambda callback: callback.data.startswith('_in_w'))
async def reply_to_order(callback: CallbackQuery, state: FSMContext):
    await state.update_data(data_product=callback.data)
    await callback.answer()
    await callback.message.edit_text(text='–°–æ–æ–±—â–∏—Ç—å –æ –∑–∞–∫–∞–∑–µ', reply_markup=keyboard_in_work)

# –¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∑–∞–∫–∞–∑
'''@router.callback_query(lambda callback: callback.data.startswith('_comp'))
async def reply_to_order(callback: CallbackQuery, state: FSMContext):
    await state.update_data(data_product=callback.data)
    await callback.answer()
    await callback.message.edit_text(text='–°–æ–æ–±—â–∏—Ç—å –æ –∑–∞–∫–∞–∑–µ', reply_markup=keyboard_in_work)'''

@router.callback_query(lambda callback: callback.data.startswith('back_to_main'))
async def reply_to_order(callback: CallbackQuery, state: FSMContext):
    await state.update_data(data_product=callback.data)
    await callback.answer()
    await callback.message.edit_text(text='–ó–∞–∫–∞–∑—ã üïê',
                         reply_markup=keyboard_orders)